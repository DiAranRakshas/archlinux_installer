#!/bin/bash

echo "####################"
echo "Chech EFI mode: if errors -> not EFI"
echo "Check network"
echo "Run create table, format and mount disk"
echo "####################"

# Set the keyboard layout
loadkeys ru

# Check EFI boot mode
ls /sys/firmware/efi/efivars
echo; echo

# Check network
ip link
ping -c3 archlinux.org

# Update the system clock
timedatectl set-ntp true
sleep 3; echo
timedatectl status

echo "####################"
echo "All ok? Every key is ok; ctrl-c is abort"
echo "####################"
read -n1 -p">"; echo

# Create disk table; format and mount it

lsblk; echo

echo "####################"
echo "Create table /dev/sda, format and mount it"
echo "1) new GPT table - do this: /dev/sda1 - efi; /dev/sda2 - swap; /dev/sda3 - root"
echo "2) new MBR table - do this: /dev/sda1 - swap; /dev/sda2 - root"
echo "3) manual format and mount"
echo "other key -> exit"
echo "####################"

read -n1 -p">" table; echo
if [[ $table == "1" ]]; then
    cfdisk -z
    lsblk
    echo "####################"
    echo "All ok? Every key is ok; ctrl-c is abort"
    echo "####################"
    read -n1 -p">"; echo

    mkfs.fat -F32 /dev/sda1
    mkswap /dev/sda2
    mkfs.ext4 /dev/sda3

    mount /dev/sda3 /mnt
    swapon /dev/sda2
    mkdir -p /mnt/boot/efi
    mount /dev/sda1 /mnt/boot/efi

    table="GPT"
    packages_table="grub os-prober efibootmgr"

elif [[ $table == "2" ]]; then
    cfdisk -z
    lsblk
    echo "####################"
    echo "All ok? Every key is ok; ctrl-c is abort"
    echo "####################"
    read -n1 -p">"; echo

    mkswap /dev/sda1
    mkfs.ext4 /dev/sda2

    mount /dev/sda2 /mnt
    swapon /dev/sda1

    table="MBR"
    packages_table="grub os-prober"

elif [[ $table == "3" ]]; then
    echo "####################"
    echo "Please format and mount root in /mnt"
    echo "In this mode GRUB NOT be install"
    echo "after in shell do: # exit"
    echo "####################"
    bash

    table="NO"

else
    exit 1
fi

echo "####################"
echo "All ok? Every key is ok; ctrl-c is abort"
echo "####################"
read -n1 -p">"; echo

# Install base packages

echo "####################"
echo "Use microcode ?"
echo "1) Microcode Intel : intel-ucode"
echo "2) Microcode AMD: amd-ucode"
echo "3) No microcode"
echo "other key -> exit"
echo "####################"

read -n1 -p">" microcode; echo
if [[ $microcode == "1" ]]; then
    packages_microcode="intel-ucode"
elif [[ $microcode == "2" ]]; then
    packages_microcode="amd-ucode"
elif [[ $microcode == "3" ]]; then
    :
else
    exit 1
fi

packages="base base-devel linux linux-firmware vi networkmanager $packages_table $packages_microcode"
pacstrap /mnt $packages

# Generate /etc/fstab
genfstab -U /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab

echo "####################"
echo "All ok? Every key is ok; ctrl-c is abort"
echo "####################"
read -n1 -p">"; echo

# Copy script for chroot mode
cp /root/archlinux_installer/chroot /mnt/root/install
echo "####################"
echo "In chroot mode do:"
echo ">/root/install $table"
echo "####################"

# Run arch-chroot

arch-chroot /mnt

# After arch-chroot copy and clean

dir=`ls /mnt/home`
dir=`echo "/mnt/home/$dir/"`
chmod -R 755 $dir
cp -r /root/archlinux_installer $dir
rm /mnt/root/install
umount -R /mnt

echo "####################"
echo "Please do this:"
echo ">poweroff"
echo "Disable flash or disk"
echo "####################"
echo "After reboot run your user and"
echo "Please do this:"
echo ">cd ~/archlinux_installer && ./packages"
echo "####################"
echo "####################"

